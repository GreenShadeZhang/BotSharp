// <auto-generated />
using System;
using System.Collections.Generic;
using System.Text.Json;
using BotSharp.Abstraction.Users.Models;
using BotSharp.Plugin.EntityFrameworkCore;
using BotSharp.Plugin.EntityFrameworkCore.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BotSharp.Plugin.EntityFrameworkCore.PostgreSql.Migrations
{
    [DbContext(typeof(BotSharpEfCoreDbContext))]
    partial class BotSharpEfCoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.Agent", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<List<ChannelInstructionElement>>("ChannelInstructions")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<List<FunctionDefElement>>("Functions")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("IconUrl")
                        .HasColumnType("text");

                    b.Property<string>("InheritAgentId")
                        .HasColumnType("text");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<List<AgentKnowledgeBaseElement>>("KnowledgeBases")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<List<string>>("Labels")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<AgentLlmConfigElement>("LlmConfig")
                        .HasColumnType("json");

                    b.Property<int?>("MaxMessageCount")
                        .HasColumnType("integer");

                    b.Property<List<McpToolElement>>("McpTools")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<bool>("MergeUtility")
                        .HasColumnType("boolean");

                    b.Property<string>("Mode")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("Profiles")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<List<AgentResponseElement>>("Responses")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<List<RoutingRuleElement>>("RoutingRules")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<List<AgentRuleElement>>("Rules")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<List<string>>("Samples")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<List<AgentTemplateElement>>("Templates")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<AgentUtilityElement>>("Utilities")
                        .IsRequired()
                        .HasColumnType("json");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("BotSharp_Agents", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.AgentTask", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DirectAgentId")
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("BotSharp_AgentTasks", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.Conversation", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChannelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DialogCount")
                        .HasColumnType("integer");

                    b.Property<Dictionary<string, JsonDocument>>("LatestStates")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("TaskId")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TitleAlias")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Id");

                    b.HasIndex("Title");

                    b.HasIndex("TitleAlias");

                    b.ToTable("BotSharp_Conversations", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.ConversationContentLog", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("AgentId")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MessageId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Id");

                    b.ToTable("BotSharp_ConversationContentLogs", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.ConversationDialog", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DialogMetaDataElement>("MetaData")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.Property<string>("RichContent")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContent")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryRichContent")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("Id");

                    b.ToTable("BotSharp_ConversationDialogs", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.ConversationState", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<BreakpointInfoElement>>("Breakpoints")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<List<StateElement>>("States")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("Id");

                    b.ToTable("BotSharp_ConversationStates", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.ConversationStateLog", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MessageId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("States")
                        .IsRequired()
                        .HasColumnType("json");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Id");

                    b.ToTable("BotSharp_ConversationStateLogs", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.CrontabItem", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Cron")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ExecutionCount")
                        .HasColumnType("integer");

                    b.Property<string>("ExecutionResult")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ExpireSeconds")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastExecutionTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LessThan60Seconds")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxExecutionCount")
                        .HasColumnType("integer");

                    b.Property<IEnumerable<CronTaskElement>>("Tasks")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.ToTable("BotSharp_CrontabItem", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.GlobalStat", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Count")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Interval")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LlmCost")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<DateTime>("RecordTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("BotSharp_GlobalStat", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.InstructionLog", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("CompletionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Dictionary<string, JsonDocument>>("States")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("SystemInstruction")
                        .HasColumnType("text");

                    b.Property<string>("TemplateName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("CreatedTime");

                    b.ToTable("BotSharp_InstructionLog", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.KnowledgeCollectionConfig", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BotSharp_KnowledgeCollectionConfig", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.KnowledgeCollectionFileMeta", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("Collection")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileSource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<KnowledgeFileMetaRefElement>("RefData")
                        .HasColumnType("json");

                    b.Property<IEnumerable<string>>("VectorDataIds")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("VectorStoreProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BotSharp_KnowledgeCollectionFileMetas", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.LlmCompletionLog", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MessageId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Response")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("Id");

                    b.ToTable("BotSharp_LlmCompletionLogs", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.Plugin", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<List<string>>("EnabledPlugins")
                        .IsRequired()
                        .HasColumnType("json");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("BotSharp_Plugins", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("BotSharp_Role", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.RoleAgent", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId", "AgentId")
                        .IsUnique();

                    b.ToTable("BotSharp_RoleAgent", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.TranslationMemory", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("HashText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OriginalText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<TranslationMemoryElement>>("Translations")
                        .IsRequired()
                        .HasColumnType("json");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("BotSharp_TranslationMemorys", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<string>("AffiliateId")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Dashboard>("Dashboard")
                        .HasColumnType("json");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("RegionCode")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("VerificationCode")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime?>("VerificationCodeExpireAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Email");

                    b.HasIndex("ExternalId");

                    b.HasIndex("Phone");

                    b.HasIndex("UserName");

                    b.ToTable("BotSharp_Users", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.UserAgent", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<List<string>>("Actions")
                        .IsRequired()
                        .HasColumnType("json");

                    b.Property<string>("AgentId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Editable")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedTime");

                    b.HasIndex("Id");

                    b.ToTable("BotSharp_UserAgents", (string)null);
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.KnowledgeCollectionConfig", b =>
                {
                    b.OwnsOne("BotSharp.Plugin.EntityFrameworkCore.Models.KnowledgeEmbeddingConfigElement", "TextEmbedding", b1 =>
                        {
                            b1.Property<string>("KnowledgeCollectionConfigId")
                                .HasColumnType("character varying(36)");

                            b1.Property<int>("Dimension")
                                .HasColumnType("integer");

                            b1.Property<string>("Model")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Provider")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("KnowledgeCollectionConfigId");

                            b1.ToTable("BotSharp_KnowledgeCollectionConfig");

                            b1.WithOwner()
                                .HasForeignKey("KnowledgeCollectionConfigId");
                        });

                    b.OwnsOne("BotSharp.Plugin.EntityFrameworkCore.Models.KnowledgeVectorStoreConfigElement", "VectorStore", b1 =>
                        {
                            b1.Property<string>("KnowledgeCollectionConfigId")
                                .HasColumnType("character varying(36)");

                            b1.Property<string>("Provider")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("KnowledgeCollectionConfigId");

                            b1.ToTable("BotSharp_KnowledgeCollectionConfig");

                            b1.WithOwner()
                                .HasForeignKey("KnowledgeCollectionConfigId");
                        });

                    b.Navigation("TextEmbedding")
                        .IsRequired();

                    b.Navigation("VectorStore")
                        .IsRequired();
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.RoleAgent", b =>
                {
                    b.HasOne("BotSharp.Plugin.EntityFrameworkCore.Entities.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BotSharp.Plugin.EntityFrameworkCore.Entities.Role", "Role")
                        .WithMany("RoleAgents")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BotSharp.Plugin.EntityFrameworkCore.Entities.Role", b =>
                {
                    b.Navigation("RoleAgents");
                });
#pragma warning restore 612, 618
        }
    }
}
